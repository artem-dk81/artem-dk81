==============================
**Домашня контрольна робота**
==============================

**Завдання:**
~~~~~~~~~~~~~
Написати програму, яка:
    * Приймає аргументи командного рядка. Для парсингу використати *Argp*.
    * Збирається за допомогою *Make*. *Makefile* містить додаткові цілі *build* і *clean*, де *build* є метою-посиланням на основну, а *clean* – PHONY-метою, що очищає всі артефакти складання.
    * Виводить результат у *stdout*, а помилки – у *stderr*.
    * Містить частину службових функцій, винесених в окремий модуль *utils* (*utils.c* та *utils.h*).
    * Використовує прапорець *--verbose* (*-v*), який змушує програму виводити виконувані дії детально. Інакше вважається, що її вивід використовуватиметься іншою програмою.
    * Повертає *exit code 0* у разі успішного завершення,інакше відповідний код помилки. Для визначення помилок використовується *enum*.
    * Використовує об'єктний стиль коду для внутрішніх конструкцій, що реалізують основний функціонал.
    * Програма виводить всі файли в директорії, создані після вказаної дати.

**Хід роботи:**
~~~~~~~~~~~~~~~

    * Був створений *Makefile* із цілями *build* та *clean*. Основна ціль *all* посилається на *build*.
    * Програма була оформлена у вигляді декількох файлів.
    * Частина службових функцій винесена в окремий модуль *utils* (*utils.c* та *utils.h*).
    * У головному source-файлі *search_files.c* відбувається оброблення аргументів командної строки та виклик необхідних функцій.
    * Є можливість використовувати прапорці *--verbose* (*-v*).
    * Є можливість передачі шляху директорії, файли якої необхідно вивести в термінал.
    * Є можливість передати дату та час, по яким необхідно фільтрувати файли.
    * У випадку відсутності аргументів, програма виведе файли директорії, в якій знаходиться виконуваний файл програми.
    * Виконується перевірка на правильність введення дати та часу, по яким відбувається фільт файлів.
    * Результат роботи програми виводиться у *stdout*, а помилки – у *stderr*.
    * Перелік можливих помилок заданий за допомогою *enum*.
    * Загалом був використаний об'єктний стиль коду для внутрішніх конструкцій, що реалізують основний функціонал.

**Результат:**
~~~~~~~~~~~~~~